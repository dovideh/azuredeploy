pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE_NAME = 'primary_container'
        DOCKER_IMAGE_NAME_SECONDARY = 'secondary_container'
        DOCKERFILE_PATH = 'codefiles/src/Dockerfile.primary'
        DOCKERFILE_PATH_SECONDARY = 'codefiles/src/Dockerfile.secondary'
    }
    
    triggers {
        pollSCM('H/5 * * * *')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Prepare') {
            steps {
                script {
                    // Retrieve and set the Docker registry URL from Jenkins credentials
                    withCredentials([string(credentialsId: 'dockerRegistryUrl', variable: 'REGISTRY_URL')]) {
                        env.DOCKER_REGISTRY_URL = "${REGISTRY_URL}"
                    }
                }
            }
        }
        
         stage('Prepare & Build Docker Images') {
                    steps {
                        script {
                            // Retrieve and set the Docker registry URL from Jenkins credentials
                            withCredentials([string(credentialsId: 'dockerRegistryUrl', variable: 'REGISTRY_URL')]) {
                                env.DOCKER_REGISTRY_URL = "${REGISTRY_URL}"
                                // Authenticate to the Docker registry once
                                docker.withRegistry(env.DOCKER_REGISTRY_URL, 'myACRCredentials') {
                                    // Use parallel stages to build both Docker images simultaneously
                                    parallel (
                                        'Build Primary Docker Image': {
                                            docker.build(env.DOCKER_IMAGE_NAME, "-f ${env.DOCKERFILE_PATH} codefiles/src/").push('latest')
                                        },
                                        'Build Secondary Docker Image': {
                                            docker.build(env.DOCKER_IMAGE_NAME_SECONDARY, "-f ${env.DOCKERFILE_PATH_SECONDARY} codefiles/src/")
                                            // Exclude push if needed
                                            .push('latest')
                                        }
                                    )
                                }
                            }
                        }
                    }
                }
        
        stage('Build') {
            steps {
                sh 'echo clean'
            }
        }
        
        stage('Test') {
            steps {
                sh 'echo test'
            }
        }
    }
    
    post {
        success {
            echo 'Build successful'
        }
        failure {
            echo 'Build failed'
        }
    }
}

